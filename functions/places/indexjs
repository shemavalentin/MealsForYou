const { Client } = require("@googlemaps/google-maps-services-js");
// const stripeClient = require("stripe")(functions.config.stripe.key);

const url = require("url");
const { mocks, addMockImage } = require("./mock");

const GOOGLE_MAPS_API_KEY = require("firebase-functions/params").defineSecret(
  "GOOGLE_MAPS_API_KEY"
);

// Helper for Google Images
const addGoogleImage = (apiKey) => (restaurant) => {
  const ref = restaurant.photos?.[0]?.photo_reference;

  restaurant.photos = [
    ref
      ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${ref}&key=${apiKey}`
      : "https://www.foodiesfeed.com/wp-content/uploads/2019/06/top-view-for-box-of-2-burgers-home-made-600x899.jpg",
  ];

  return restaurant;
};

exports.placesNearby = async (req, res) => {
  const parsedUrl = url.parse(req.url, true);
  const { city, location, mock } = parsedUrl.query;

  if (!city && !location) {
    return res
      .status(400)
      .json({ error: "Missing both city and location parameters" });
  }

  // MOCK MODE
  if (mock === "true") {
    let latLng = location;
    if (!latLng && city) {
      return res
        .status(400)
        .json({ error: "Mock mode requires location coordinates" });
    }

    const mockData = mocks[latLng];
    if (!mockData) {
      return res
        .status(404)
        .json({ error: `No mock data for location: ${latLng}` });
    }

    const withImages = mockData.results.map(addMockImage);
    return res.json({ results: withImages });
  }

  // REAL MODE
  const apiKey =
    process.env.FUNCTIONS_EMULATOR === "true"
      ? process.env.GOOGLE_MAPS_API_KEY
      : GOOGLE_MAPS_API_KEY.value();

  const googleClient = new Client({});

  try {
    let latLng = location;

    if (!latLng && city) {
      // Geocode the city
      const geoRes = await googleClient.geocode({
        params: {
          address: city,
          key: apiKey,
        },
        timeout: 1000,
      });

      const geo = geoRes.data.results?.[0]?.geometry?.location;
      if (!geo) {
        return res.status(404).json({ error: "City not found" });
      }

      latLng = `${geo.lat},${geo.lng}`;
    }

    // Places Nearby Search
    const nearbyRes = await googleClient.placesNearby({
      params: {
        location: latLng,
        radius: 1500,
        type: "restaurant",
        key: apiKey,
      },
      timeout: 1000,
    });

    const enriched = nearbyRes.data.results.map(addGoogleImage(apiKey));
    return res.json({ results: enriched });
  } catch (error) {
    return res.status(500).json({
      error: error?.response?.data?.error_message || error.message,
    });
  }
};
